<?php

namespace App\Models;

use Exception;
use Request;
use Response;

class Pic extends BaseModule
{
    const TYPE_BANNER = 0;

    protected $fillable = [
        'name',
        'image',
        'link',
        'type',
        'sort',
    ];

    protected $table = 'pics';
    protected $entities = [];

    public static function stores($input)
    {
        $moment = static::create($input);

        //保存图片集
        if (isset($input['images']) && !empty($input['images'])) {
            Item::sync(Item::TYPE_IMAGE, $moment, $input['images']);
        }

        return $moment;
    }

    public static function updates($id, $input)
    {
        $index = static::find($id);

        $index->update($input);

        return $index;
    }

    public static function table()
    {
        $filters = Request::all();

        $offset = Request::get('offset') ? Request::get('offset') : 0;
        $limit = Request::get('limit') ? Request::get('limit') : 20;

        $ds = new DataSource();
        $indexs = static::filter($filters)
            ->orderBy('sort', 'desc')
            ->skip($offset)
            ->limit($limit)
            ->get();

        $ds->total = static::filter($filters)
            ->count();

        $indexs->transform(function ($index) {
            $attributes = $index->getAttributes();

            //实体类型
            foreach ($index->entities as $entity) {
                $entity_map = str_replace('_id', '_name', $entity);
                $entity = str_replace('_id', '', $entity);
                $attributes[$entity_map] = empty($index->$entity) ? '' : $index->$entity->name;
            }

            //日期类型
            foreach ($index->dates as $date) {
                $attributes[$date] = empty($index->$date) ? '' : $index->$date->toDateTimeString();
            }
            $attributes['start_at'] = empty($index->start_at) ? '' : $index->start_at->toDateTimeString();
            $attributes['created_at'] = empty($index->created_at) ? '' : $index->created_at->toDateTimeString();
            $attributes['updated_at'] = empty($index->updated_at) ? '' : $index->updated_at->toDateTimeString();
            return $attributes;
        });

        $ds->rows = $indexs;

        return Response::json($ds);
    }

    /**
     * 排序
     */
    public static function sort()
    {
        $select_id = request('select_id');
        $place_id = request('place_id');
        $move_down = request('move_down');

        $select = self::find($select_id);
        $place = self::find($place_id);

        if (empty($select) || empty($place)) {
            return Response::json([
                'status_code' => 404,
                'message' => 'ID不存在',
            ]);
        }

        if ($select->is_top && !$place->is_top) {
            return Response::json([
                'status_code' => 404,
                'message' => '置顶记录不允许移至普通位置',
            ]);
        }

        if (!$select->is_top && $place->is_top) {
            return Response::json([
                'status_code' => 404,
                'message' => '普通记录不允许移至置顶位置',
            ]);
        }

        $sort = $place->sort;
        try {
            if ($move_down) {
                //下移
                //增加移动区间的排序值
                self::where('sort', '>=', $place->sort)
                    ->where('sort', '<', $select->sort)
                    ->increment('sort');
            } else {
                //上移
                //减少移动区间的排序值
                self::where('sort', '>', $select->sort)
                    ->where('sort', '<=', $place->sort)
                    ->decrement('sort');
            }
        } catch (Exception $e) {
            return Response::json([
                'status_code' => 500,
                'message' => $e->getMessage(),
            ]);
        }
        $select->sort = $sort;
        $select->save();

        return Response::json([
            'status_code' => 200,
            'message' => 'success',
        ]);
    }

    public static function state($input)
    {
        $ids = $input['ids'];
        $state = $input['state'];

        $items = static::whereIn('id', $ids)
            ->get();
        foreach ($items as $item) {
            $item->save();
            $item->state = $state;

            if ($state == static::STATE_DELETED) {
                $item->delete();
            }
        }
    }

}
