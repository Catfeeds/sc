<?php

namespace App\Api\Controllers;

use App\Libraries\wyyIm\IstantMessage;
use App\Libraries\aliSms\SmsAli;
use App\Models\Favorite;
use App\Models\Member;
use App\Models\Message;
use Carbon\Carbon;
use Exception;
use Validator;
use Request;
use Cache;
use DB;

class MemberController extends BaseController
{
    public function check($input)
    {
        $rules = [
            'mobile' => 'required|numeric',
            'password' => 'required',
            'captcha' => 'required|numeric',
        ];

        $message = [
            'mobile.numeric' => '手机号必须为数字',
            'mobile.required' => '手机号不能为空',
            'password.required' => '密码不能为空',
            'captcha.numeric' => '验证码必须为数字',
            'captcha.required' => '验证码不能为空',
        ];

        $validate = Validator::make($input, $rules, $message);

        if ($validate->fails()) {
            throw new Exception($validate->errors()->first());
        }

        return true;
    }

    /**
     * @SWG\Get(
     *   path="/members/login",
     *   summary="会员登录",
     *   tags={"/members 会员"},
     *   @SWG\Parameter(name="member_name", in="query", required=true, description="会员名", type="string"),
     *   @SWG\Parameter(name="password", in="query", required=true, description="密码", type="string"),
     *   @SWG\Response(
     *     response=200,
     *     description="登录成功"
     *   ),
     *   @SWG\Response(
     *     response="404",
     *     description="没有找到路由"
     *   )
     * )
     */
    public function login()
    {
        $mobile = Request::get('mobile');
        $password = empty(Request::get('password')) ? '' : Request::get('password');
        $captcha = empty(Request::get('captcha')) ? '' : Request::get('captcha');

        if (!preg_match("/1[34578]{1}\d{9}$/", $mobile)) {
            return $this->responseError('请输入正确的手机号', 401);
        }

        if (empty($captcha) && empty($password)) {
            return $this->responseError('请输入密码或验证码', 405);
        }

        try {
            $member = Member::where('mobile', $mobile)
                ->first();

            if (empty($member)) {
                return $this->responseError('此用户未注册', 404);
            }

            if (!empty($member) && $member->state == Member::STATE_DISABLED) {
                return $this->responseError('此用户已被禁用', 403);
            }

            if (md5(md5($password) . $member->salt) !== $member->password && !empty($password)) {
                return $this->responseError('账号或密码错误', 402);
            }

            $key = 'captcha_' . Member::CAPTCHA_LOGIN . '_' . $mobile;
            if (!empty($captcha) && Cache::get($key) != $captcha) {
                return $this->responseError('手机验证码错误', 406);
            }

            //旧token作废
//            try {
//                \JWTAuth::refresh($member->token);
//            } catch (Exception $e) {
//                return $this->responseError($e->getMessage());
//            }

            $member->token = \JWTAuth::fromUser($member);

            $member->ip = get_client_ip();

            $member->save();

            //移除验证码
            if (!empty($captcha)) {
                Cache::forget($key);
            }

            $token_data = tokenTool($member->token);

            $member->expired_time = $token_data['expired_time'];
            $member->refresh_token = $token_data['refresh_token'];

            return $this->responseSuccess($member);

        } catch (Exception $e) {
            return $this->responseError($e->getMessage());
        }
    }

    /**
     * @SWG\Get(
     *   path="/members/exlogin",
     *   summary="第三方登录",
     *   tags={"/members 会员"},
     *   @SWG\Parameter(name="member_name", in="query", required=true, description="会员名", type="string"),
     *   @SWG\Parameter(name="nick_name", in="query", required=true, description="昵称", type="string"),
     *   @SWG\Parameter(name="avatar_url", in="query", required=true, description="头像URL", type="string"),
     *   @SWG\Parameter(name="source", in="query", required=true, description="来源(qq,wx,wb)", type="string"),
     *   @SWG\Response(
     *     response=200,
     *     description="登录成功"
     *   ),
     *   @SWG\Response(
     *     response="404",
     *     description="没有找到路由"
     *   )
     * )
     */
    public function exLogin()
    {
        $member_name = Request::get('member_name');
        $nick_name = Request::get('nick_name');
        $avatar_url = Request::get('avatar_url');
        $source = Request::get('source');

        if (strlen($member_name) <= 11) {
            return $this->responseError('此用户不存在', 401);
        }

        $member = Member::where('name', $member_name)
            ->first();

        //保存本地会员数据
        if ($member) {
            if ($member->state == Member::STATE_DISABLED) {
                return $this->responseError('您的账户已被禁用', 401);
            }

            //旧token作废
            try {
                \JWTAuth::refresh($member->token);
            } catch (Exception $e) {
            }
        } else {
            $member = Member::create([
                'name' => $member_name,
                'nick_name' => $nick_name,
                'avatar_url' => $avatar_url,
                'type' => Member::TYPE_NORMAL,
                'source' => $source,
                'state' => Member::STATE_ENABLED,
                'points' => 0,
                'ip' => get_client_ip(),
            ]);
        }

        $member->token = \JWTAuth::fromUser($member);
        $member->ip = get_client_ip();
        $member->save();
        \Log::debug('exlogin: ' . $member->id);
        \Log::debug('token: ' . $member->token);
        \Log::debug('ip: ' . get_client_ip());

        return $this->responseSuccess($member);
    }

    /**
     * @SWG\Get(
     *   path="/members/register",
     *   summary="会员注册",
     *   tags={"/members 会员"},
     *   @SWG\Parameter(name="member_name", in="query", required=true, description="会员名", type="string"),
     *   @SWG\Parameter(name="password", in="query", required=true, description="密码", type="string"),
     *   @SWG\Parameter(name="captcha", in="query", required=true, description="验证码", type="string"),
     *   @SWG\Response(
     *     response=200,
     *     description="注册成功"
     *   ),
     *   @SWG\Response(
     *     response="404",
     *     description="没有找到路由"
     *   )
     * )
     */
    public function register()
    {
        $input = Request::all();

        $mobile = $input['mobile'];
        $password = $input['password'];
        $captcha = $input['captcha'];

        if (!preg_match("/1[34578]{1}\d{9}$/", $mobile)) {
            return $this->responseError('请输入正确的手机号', 401);
        }

        try {
            $this->check($input);

            //比较验证码
            $key = 'captcha_' . Member::CAPTCHA_REGISTER . '_' . $mobile;
            if (Cache::get($key) != $captcha) {
                return $this->responseError('手机验证码错误');
            }

            $member = Member::where('mobile', $mobile)
                ->first();

            if ($member) {
                return $this->responseError('手机号已注册');
            }

            $salt = str_rand();

            //开始事务
            //DB::beginTransaction();

            //用手机号注册网易云im账号
            $im = new IstantMessage();
            $Im_data = $im->curl_im(config('site.wyyIm.CreateImUser'), ['accid' => $mobile]);

            if ($Im_data['code'] !== 200) {
                //DB::rollBack();
                return $this->responseError('注册失败，请稍后再试。');
            }

            $member = Member::create([
                'name' => $mobile,
                'password' => md5(md5($password) . $salt),
                'nick_name' => $mobile,
                'mobile' => $mobile,
                'avatar_url' => url('/images/avatar_member.png'),
                'salt' => $salt,
                'type' => Member::TYPE_ORDINARY,
                'state' => Member::STATE_ENABLED,
                'points' => 0,
                'ip' => get_client_ip(),
            ]);

            $member->token = \JWTAuth::fromUser($member);
            $member->im_token = $Im_data['info']['token'];
            $member->save();

            $member->accid = $Im_data['info']['accid'];

            //移除验证码
            Cache::forget($key);

            return $this->responseSuccess($member);

        } catch (Exception $e) {
            return $this->responseError($e->getMessage());
        } finally {
            DB::commit();
        }
    }

    /**
     * @SWG\Get(
     *   path="/members/info",
     *   summary="获取会员信息",
     *   tags={"/members 会员"},
     *   @SWG\Parameter(name="site_id", in="query", required=true, description="站点ID", type="integer"),
     *   @SWG\Parameter(name="token", in="query", required=true, description="token", type="string"),
     *   @SWG\Response(
     *     response=200,
     *     description="正常"
     *   ),
     *   @SWG\Response(
     *     response="401",
     *     description="无效"
     *   )
     * )
     */
    public function info()
    {

        try {
            $member = \JWTAuth::parseToken()->authenticate();

            if ($member->token == \JWTAuth::getToken()) {
                $member->messages = Message::count($member->id);
                $member->favorites = Favorite::count($member->id);
                return $this->responseSuccess($member);
            } else {
                return $this->responseError('无效的token,请重新登录', 401);
            }
        } catch (Exception $e) {
            return $this->responseError('无效的token,请重新登录', 401);
        }
    }

    /**
     * @SWG\Post(
     *   path="/members/avatar",
     *   summary="修改头像",
     *   tags={"/members 会员"},
     *   consumes={"multipart/form-data"},
     *   @SWG\Parameter(name="avatar_file", in="formData", required=false, description="图片文件", type="file"),
     *   @SWG\Parameter(name="token", in="query", required=true, description="token", type="string"),
     *   @SWG\Response(
     *     response=200,
     *     description="上传成功"
     *   ),
     *   @SWG\Response(
     *     response="404",
     *     description="没有找到"
     *   )
     * )
     */
    public function avatar()
    {
        try {
            $member = \JWTAuth::parseToken()->authenticate();
            if (!$member) {
                return $this->responseError('无效的token,请重新登录');
            }
        } catch (Exception $e) {
            return $this->responseError('无效的token,请重新登录');
        }

        $file = Request::file('avatar_file');
        if ($file->getSize() > 1024 * 1024) {
            return $this->responseError('头像文件过大');
        }

        $extension = $file->getClientOriginalExtension(); //取得上传文件的扩展名

        $year = Carbon::now()->format('Y');
        $month = Carbon::now()->format('m');
        $day = Carbon::now()->format('d');
        $time = Carbon::now()->format('YmdHis');

        $relativePath = config('site.upload.avatar_path') . '/' . $year . '/' . $month . $day . '/';
        $uploadPath = public_path() . $relativePath;
        $filename = $time . mt_rand(100, 999) . '.' . $extension;
        $targetFile = $uploadPath . $filename;

        $file->move($uploadPath, $targetFile);

        $member->avatar_url = url($relativePath . $filename);
        $member->save();

        return $this->responseSuccess([
            'status_code' => 200,
            'message' => 'success',
            'data' => get_url($member->avatar_url),
        ]);
    }

    /**
     * @SWG\Post(
     *   path="/members/info/nick",
     *   summary="修改会员昵称",
     *   tags={"/members 会员"},
     *   @SWG\Parameter(name="nick_name", in="query", required=true, description="昵称", type="string"),
     *   @SWG\Parameter(name="token", in="query", required=true, description="token", type="string"),
     *   @SWG\Response(
     *     response=200,
     *     description="正常"
     *   ),
     *   @SWG\Response(
     *     response="401",
     *     description="无效"
     *   )
     * )
     */
    public function nick()
    {
        $nick_name = Request::get('nick_name');

        try {
            $member = \JWTAuth::parseToken()->authenticate();
            if (!$member) {
                return $this->responseError('无效的token,请重新登录');
            }
        } catch (Exception $e) {
            return $this->responseError('无效的token,请重新登录');
        }

        try {
            //检查昵称是否已存在
            $count = Member::where('nick_name', $nick_name)
                ->where('id', '<>', $member->id)
                ->count();
            if ($count > 0) {
                throw new Exception('此昵称已存在', -1);
            }

            $member->nick_name = $nick_name;
            $member->save();

            return $this->responseSuccess($member);
        } catch (Exception $e) {
            return $this->responseError($e->getMessage());
        }
    }

    /**
     * @SWG\Get(
     *   path="/members/token/status",
     *   summary="获取token状态",
     *   tags={"/members 会员"},
     *   @SWG\Parameter(name="token", in="query", required=true, description="token", type="string"),
     *   @SWG\Response(
     *     response=200,
     *     description="正常"
     *   ),
     *   @SWG\Response(
     *     response="401",
     *     description="无效"
     *   )
     * )
     */
    public function status()
    {
        try {
            \Log::debug('token: ' . Request::get('token'));
            $member = \JWTAuth::parseToken()->authenticate();

            if (!$member) {
                return $this->responseError('无效的token,请重新登录');
            }
            return $this->responseSuccess();
        } catch (Exception $e) {
            \Log::debug('exception: ' . $e->getMessage());
            return $this->responseError('无效的token,请重新登录');
        }
    }

    /**
     * @SWG\Get(
     *   path="/member/mobile/captcha",
     *   summary="获取验证码",
     *   tags={"/members 会员"},
     *   @SWG\Parameter(name="mobile", in="query", required=true, description="手机号", type="string"),
     *   @SWG\Parameter(name="type", in="query", required=true, description="类型(0:找回密码,1:注册,2:重置密码,3:绑定手机,4:解除绑定手机)", type="string"),
     *   @SWG\Response(
     *     response=200,
     *     description="正常"
     *   ),
     *   @SWG\Response(
     *     response="404",
     *     description="没有找到路由"
     *   )
     * )
     */
    public function getCaptcha()
    {
        $mobile = Request::get('mobile');
        $type = Request::get('type');

        try {
            if (!preg_match("/1[34578]{1}\d{9}$/", $mobile)) {
                return $this->responseError('请输入正确的手机号');
            }

            //判断此手机号24小时内发送短信是否过多-------其实阿里自己有限制
            $times = Cache::get('captcha_times_' . $mobile);
            if (!isset($times)) {
                Cache::add('captcha_times_' . $mobile, 1, 24 * 60);
            } elseif ($times >= 20) {
                return $this->responseError('您今天发送短信次数过多');
            } else {
                Cache::increment('captcha_times_' . $mobile, 1);
            }

            $signName = config("site.smsAli.sign");
            $templateCode = config("site.smsAli.template." . $type);
            $code = random(6);

            $response = SmsAli::sendSms(
                $signName,
                $templateCode,
                $mobile, // 短信接收者
                Array(  // 短信模板中字段的值
                    "code" => $code
                )
            );

            if ($response->Code !== 'OK') {
                return $this->responseError('短信验证码发送失败');
            }

            Cache::add('captcha_' . $type . '_' . $mobile, $code, 5);
        } catch (Exception $e) {
            return $this->responseError($e->getMessage());
        }

        return $this->responseSuccess();
    }

    /**
     * @SWG\Get(
     *   path="/token/refresh",
     *   summary="刷新token",
     *   tags={"/members 会员"},
     *   @SWG\Parameter(name="member_ie", in="query", required=true, description="token", type="string"),
     *   @SWG\Parameter(name="refresh_token", in="query", required=true, description="旧密码", type="string"),
     *   @SWG\Response(
     *     response=200,
     *     description="获取成功"
     *   ),
     *   @SWG\Response(
     *     response="404",
     *     description="没有找到路由"
     *   )
     * )
     */
    public function refresh()
    {
        $input = Request::input();
        $member = Member::find($input['member_id']);

        $token_data = tokenTool($member->token);
        $refresh_token = $token_data['refresh_token'];

        if ($refresh_token !== $input['refresh_token']) {
            return $this->responseError('刷新token错误，无法刷新token');
        }
        //旧token作废
        try {
            \JWTAuth::refresh($member->token);
        } catch (Exception $e) {
            return $this->responseError($e->getMessage());
        }

        $token = \JWTAuth::fromUser($member);
        $member->token = $token;
        $member->save();

        $data['token'] = $token;
        $new_token = tokenTool($member->token);
        $data['expired_time'] = $new_token['expired_time'];
        $data['refresh_token'] = $new_token['refresh_token'];

        return $this->responseSuccess($data);
    }

    /**
     * @SWG\Get(
     *   path="/members/password/reset",
     *   summary="重置密码",
     *   tags={"/members 会员"},
     *   @SWG\Parameter(name="member_name", in="query", required=true, description="会员名", type="string"),
     *   @SWG\Parameter(name="captcha", in="query", required=true, description="验证码", type="string"),
     *   @SWG\Parameter(name="password", in="query", required=true, description="新密码", type="string"),
     *   @SWG\Response(
     *     response=200,
     *     description="修改成功"
     *   ),
     *   @SWG\Response(
     *     response="404",
     *     description="没有找到路由"
     *   )
     * )
     */
    public function resetPassword()
    {
        $mobile = Request::get('mobile');
        $captcha = Request::get('captcha');
        $password = Request::get('password');

        try {
            if (!preg_match("/1[34578]{1}\d{9}$/", $mobile)) {
                throw new Exception('请输入正确的手机号', -1);
            }

            $input = [
                'captcha' => $captcha,
                'password' => $password,
            ];

            $check = $this->dataCheck($input);
            if (!$check) {
                return $this->responseError('参数错误，请检查参数');
            }

            //比较验证码
            $key = 'captcha_' . Member::CAPTCHA_RESET . '_' . $mobile;
            if (Cache::get($key) != $captcha) {
                throw new Exception('手机验证码错误', -1);
            }

            $member = Member::where('mobile', $mobile)->first();

            //检查用户是否存在
            if (!$member) {
                return $this->responseError('此用户不存在', 401);
            }

            if ($member->state == Member::STATE_DISABLED) {
                return $this->responseError('此用户已被禁用', 402);
            }

            $member->password = md5(md5($password) . $member->salt);
            $member->save();

            //移除验证码
            Cache::forget($key);

            return $this->responseSuccess();
        } catch (Exception $e) {
            return $this->responseError($e->getMessage());
        }
    }
}