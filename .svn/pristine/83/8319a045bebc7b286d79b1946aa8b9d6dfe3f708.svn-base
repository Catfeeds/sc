<?php

namespace App\Models;

use Exception;
use Request;
use Response;


class Live extends BaseModule
{
    const STATE_COMING = 'coming';
    const STATE_PREPARE = 'prepare';
    const STATE_PREPARED = 'prepared';
    const STATE_ONGOING = 'ongoing';
    const STATE_END = 'end';

    const MAGREE_NO = 0;
    const JOINMODE_NO = 0;
    const TEAM_MAX_NUM = 200;

    const NOT_TOP = 0;
    const IS_TOP = 1;

    const LIVE_MANAGER = 'mkImManager';

    const STATES = [
        'coming' => '未开始',
        'prepare' => '待准备',
        'prepared' => '准备完毕',
        'ongoing' => '进行中',
        'end' => '已结束',
    ];

    const STATUS = [
        0 => '删除',
    ];

    const STATE_PERMISSIONS = [
        0 => '@live-delete',
        2 => '@live-cancel',
        9 => '@live-publish',
    ];

    protected $table = 'lives';

    protected $fillable = ['title', 'intro', 'cover_url', 'poster_url', 'stream_url', 'start_at', 'duration', 'price', 'bought_num', 'is_top', 'member_id', 'user_id', 'room_ids', 'state', 'published_at'];

    protected $dates = ['start_at', 'published_at'];

    protected $entities = ['member_id', 'user_id'];

    public function members()
    {
        return $this->belongsToMany(Member::class)->withPivot('room_id')->withTimestamps();
    }

    public function carts()
    {
        return $this->morphMany(Cart::class, 'refer');
    }

    public function previous()
    {
        return static::where('site_id', $this->site_id)
            ->where('state', $this->state)
            ->where('sort', '>', $this->sort)
            ->orderBy('sort', 'desc')
            ->first();
    }

    public function next()
    {
        return static::where('site_id', $this->site_id)
            ->where('state', $this->state)
            ->where('sort', '<', $this->sort)
            ->orderBy('sort', 'desc')
            ->first();
    }

    public static function getStateName($state)
    {
        return array_key_exists($state, static::STATUS) ? static::STATUS[$state] : '';
    }

    public static function stores($input)
    {
        $input['state'] = static::STATE_PUBLISHED;

        $moment = static::create($input);

        //保存图片集
        if (isset($input['images']) && !empty($input['images'])) {
            Item::sync(Item::TYPE_IMAGE, $moment, $input['images']);
        }

        return $moment;
    }

    public static function updates($id, $input)
    {
        $live = static::find($id);

        $live->update($input);

        return $live;
    }

    public static function store($input)
    {
        $input['state'] = Request::get('state');
        $moment = static::create($input);

        //保存图片集
        if (isset($input['images']) && !empty($input['images'])) {
            Item::sync(Item::TYPE_IMAGE, $moment, $input['images']);
        }

        return $moment;
    }

    public static function table()
    {
        $filters = Request::all();

        $offset = Request::get('offset') ? Request::get('offset') : 0;
        $limit = Request::get('limit') ? Request::get('limit') : 20;

        $ds = new DataSource();
        $lives = static::with('user')
            ->filter($filters)
            ->orderBy('is_top', 'desc')
            ->orderBy('start_at', 'desc')
            ->skip($offset)
            ->limit($limit)
            ->get();

        $ds->total = static::filter($filters)
            ->count();

        $lives->transform(function ($live) {
            $attributes = $live->getAttributes();

            //实体类型
            foreach ($live->entities as $entity) {
                $entity_map = str_replace('_id', '_name', $entity);
                $entity = str_replace('_id', '', $entity);
                $attributes[$entity_map] = empty($live->$entity) ? '' : $live->$entity->name;
            }

            //日期类型
            foreach ($live->dates as $date) {
                $attributes[$date] = empty($live->$date) ? '' : $live->$date->toDateTimeString();
            }
            $attributes['state_name'] = $live->stateName();
            $attributes['start_at'] = empty($live->start_at) ? '' : $live->start_at->toDateTimeString();
            $attributes['created_at'] = empty($live->created_at) ? '' : $live->created_at->toDateTimeString();
            $attributes['updated_at'] = empty($live->updated_at) ? '' : $live->updated_at->toDateTimeString();
            return $attributes;
        });

        $ds->rows = $lives;

        return Response::json($ds);
    }

    /**
     * 排序
     */
    public static function sort()
    {
        $select_id = request('select_id');
        $place_id = request('place_id');
        $move_down = request('move_down');

        $select = self::find($select_id);
        $place = self::find($place_id);

        if (empty($select) || empty($place)) {
            return Response::json([
                'status_code' => 404,
                'message' => 'ID不存在',
            ]);
        }

        if ($select->is_top && !$place->is_top) {
            return Response::json([
                'status_code' => 404,
                'message' => '置顶记录不允许移至普通位置',
            ]);
        }

        if (!$select->is_top && $place->is_top) {
            return Response::json([
                'status_code' => 404,
                'message' => '普通记录不允许移至置顶位置',
            ]);
        }

        $sort = $place->sort;
        try {
            if ($move_down) {
                //下移
                //增加移动区间的排序值
                self::where('sort', '>=', $place->sort)
                    ->where('sort', '<', $select->sort)
                    ->increment('sort');
            } else {
                //上移
                //减少移动区间的排序值
                self::where('sort', '>', $select->sort)
                    ->where('sort', '<=', $place->sort)
                    ->decrement('sort');
            }
        } catch (Exception $e) {
            return Response::json([
                'status_code' => 500,
                'message' => $e->getMessage(),
            ]);
        }
        $select->sort = $sort;
        $select->save();

        return Response::json([
            'status_code' => 200,
            'message' => 'success',
        ]);
    }

    public static function state($input)
    {
        $id = $input['id'];
        $state = $input['state'];
        $live = static::find($id);
        if (isset($input['room_ids'])) {
            $live->room_ids = $input['room_ids'];
        }

        //判断是否有操作权限 todo
//        $permission = array_key_exists($state, static::STATE_PERMISSIONS) ? static::STATE_PERMISSIONS[$state] : '';
//        if (!empty($permission) && Gate::denies($permission)) {
//            return;
//        }

        $items = static::whereIn('id', $id)
            ->get();

        foreach ($items as $item) {
            $item->state = $state;
            $item->save();
            if ($state == static::STATE_DELETED) {
                $item->delete();
            } else if ($item->trashed()) {
                $item->restore();
            }
            if ($state == static::STATE_PUBLISHED) {
                $item->published_at = Carbon::now();
                $item->save();
            }
        }

    }
}